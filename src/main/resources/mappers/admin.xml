<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="admin">

	<!-- DashBorad 카드 쿼리 시작 -->
	<select id="countMember" resultType="int">
		SELECT COUNT(*)
		FROM member
		WHERE m_grade not in ('A')
	</select>

	<select id="countBook" resultType="int">
		SELECT COUNT(*)
		FROM book
	</select>

	<select id="totalSales" resultType="int">
		SELECT SUM(pay_total)
		FROM payment
	</select>
	<!-- DashBorad 카드 끝 -->


	<!-- 회원 시작 -->
	<select id="memberList" resultType="kr.co.itwill.member.MemberDTO">
		SELECT m_id, m_pw, m_name, m_nick, m_birth, m_gender, m_zip, m_add1, m_add2, m_tel, m_email, m_mailcheck, m_smscheck, m_grade, m_gudok, m_heat, m_rdate, m_img, m_month, m_year
		FROM member
		WHERE m_grade not in ('A')
	</select>
	<!-- 회원 끝-->



	<!-- 커뮤니티 시작 -->
	<select id="communityList" resultType="kr.co.itwill.community.CommunityUnionDTO" parameterType="String">
		<![CDATA[
		SELECT CC.*, b_code, b_name, b_type, b_bookcover
		FROM (
				SELECT BB.*, AA.*
				FROM (
						 SELECT s_code, COUNT(*)+1 AS cnt
						 FROM community_signup
						 GROUP BY s_code
					 )AA LEFT OUTER JOIN community BB
				ON AA.s_code = BB.c_code
				UNION
				SELECT BB.*, AA.*
				FROM (
						 SELECT s_code, COUNT(*)+1 AS cnt
						 FROM community_signup
						 GROUP BY s_code
					 )AA RIGHT OUTER JOIN community BB
				ON AA.s_code = BB.c_code
			) CC JOIN book DD
		ON CC.c_bcode = DD.b_code
		]]>
		<where>
			<if test="c_state != 'all'">
				c_state = #{c_state}
			</if>
		</where>
		ORDER BY c_pick DESC, c_rdate DESC
	</select>

	<!--mdPick 체크박스로 업데이트 한 번에 하기-->
	<update id="allNull">
		UPDATE community
		SET c_pick = NULL
	</update>

	<update id="updatePick">
		<foreach collection="list" item="item" index="index" separator=";">
			UPDATE community
			SET c_pick = 'Y'
			WHERE c_code = #{item.c_code}
		</foreach>
	</update>

	<!-- 커뮤니티 끝 -->



	<!-- 도서관리 시작 -->
	<!-- 페이징 있는 목록-->
	<select id="list_a" resultType="kr.co.itwill.book.BookDTO">
		SELECT AA.*
        FROM(
        SELECT @RNO := @RNO + 1 AS r, CC.*
        FROM(
        SELECT b_code, b_name, b_type, b_gudok, b_author, b_publish, b_page, b_price, b_cdate, b_rdate, b_bookcover, b_coversize, b_des
        FROM book
        ) CC, (SELECT @RNO := 0) BB order by b_rdate DESC
        ) AA
        WHERE r BETWEEN #{startRow} AND #{endRow}
	</select>


    <!-- 검색 -->
    <select id="search" resultType="kr.co.itwill.book.BookDTO">
	    SELECT b_code, b_name, b_type, b_gudok, b_author, b_publish, b_page, b_price, b_cdate, b_rdate, b_bookcover, b_coversize, b_des
	    FROM  book
	    WHERE b_name LIKE CONCAT('%', #{keyword}, '%') OR b_author LIKE CONCAT('%', #{keyword}, '%')
	    ORDER BY b_code DESC
    </select>
    
    
    <!-- 상세페이지 -->
    <select id="productdetail" resultType="kr.co.itwill.book.BookDTO">
		SELECT b_code, b_name, b_type, b_gudok, b_author, b_publish, b_page, b_price, b_cdate, b_rdate, b_bookcover, b_coversize, b_des
		FROM book
		WHERE b_code = #{b_code}
	</select>


	<!-- 수정 -->
	<update id="update">
        UPDATE book
        SET b_name		= #{b_name}
        , b_type		= #{b_type}
        , b_gudok		= #{b_gudok}
        , b_author		= #{b_author}
        , b_publish		= #{b_publish}
        , b_page		= #{b_page}
        , b_price		= #{b_price}
        , b_rdate		= #{b_rdate}
        , b_bookcover	= #{b_bookcover}
        , b_coversize	= #{b_coversize}
        , b_des			= #{b_des}
        WHERE b_code  = #{b_code}
    </update>


	<delete id="delete">
		DELETE FROM book
		WHERE b_code = #{b_code}
	</delete>



	<insert id = "productinsert" parameterType="kr.co.itwill.book.BookDTO">
		INSERT INTO book(b_code, b_name, b_type, b_gudok, b_author, b_publish, b_page, b_price, b_cdate, b_rdate, b_bookcover, b_coversize, b_des)
		VALUES (#{b_code}, #{b_name}, #{b_type}, #{b_gudok}, #{b_author}, #{b_publish}, #{b_page}, #{b_price}, now(), #{b_rdate}, #{b_bookcover}, #{b_coversize}, #{b_des})
	</insert>
	<!-- 도서관리 끝 -->

</mapper>